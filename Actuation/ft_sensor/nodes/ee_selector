#!/usr/bin/env python

""" Keeps track of tool and sets appropriate chains
 Created: 4/11/2022
"""

__author__ = "Mike Hagenow"

import rospy
import time
from std_msgs.msg import String, Float64
from geometry_msgs.msg import Wrench, Pose
from sensor_msgs.msg import PointCloud2
import numpy as np
import rospkg
from scipy.spatial.transform import Rotation as ScipyR
from scipy import signal as scisignal
import signal
import sys

from tf2_ros import TransformBroadcaster
from geometry_msgs.msg import TransformStamped

def signal_handler(sig, frame):
    print('You pressed Ctrl+C!')
    sys.exit(0)

class EEProcessor:
    def __init__(self):
        rospy.init_node('ee_processor')
        rospy.Subscriber("/panda/set_ee", String, self.processNewEE)
        self.mass_pub = rospy.Publisher('/panda/ee_mass', Float64, queue_size=1, latch=True)

        self.br = TransformBroadcaster()

        time.sleep(0.5)

        self.ee_link = rospy.get_param("/default_end_effector_frame").split("_joint")[0] # currently default has joint appended (for ik)
        str_temp = String(data=self.ee_link)
        self.processNewEE(str_temp)

        self.broadcastEE()

    def processNewEE(self,data):
        self.ee_link = data.data
        self.ee_COM_link = data.data + '_COM'
        
        if(self.ee_link=='panda_orbital'):
            ee_mass = 0.956 # kg
        else:
            ee_mass = 0.0 # kg
        
        mass_msg = Float64()
        mass_msg.data = ee_mass
        self.mass_pub.publish(mass_msg)
    
    def broadcastEE(self):
        # Takes the current ee and sets it equivalent to panda_ee in the TF tree
        t = TransformStamped()
        t.header.seq = 0
        t.child_frame_id = 'panda_ee'
        t.transform.translation.x = 0
        t.transform.translation.y = 0
        t.transform.translation.z = 0
        t.transform.rotation.x = 0
        t.transform.rotation.y = 0
        t.transform.rotation.z = 0
        t.transform.rotation.w = 1

        rate = rospy.Rate(1000.0)
        while not rospy.is_shutdown():
            t.child_frame_id = 'panda_ee'
            t.header.stamp = rospy.Time.now()
            t.header.frame_id = self.ee_link
            self.br.sendTransform(t)
            t.child_frame_id = 'panda_ee_COM'
            t.header.stamp = rospy.Time.now()
            t.header.frame_id = self.ee_COM_link
            self.br.sendTransform(t)
            rate.sleep()

       
if __name__ == "__main__":
    signal.signal(signal.SIGINT, signal_handler)
    ee_proc = EEProcessor()





