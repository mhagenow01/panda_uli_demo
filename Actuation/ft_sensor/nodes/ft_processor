#!/usr/bin/env python

""" Takes raw force-torque and rotates/filters/bias/removes tool weight
 Created: 4/11/2022
"""

__author__ = "Mike Hagenow"

import rospy
import time
from std_msgs.msg import String, Float64
from geometry_msgs.msg import Wrench, Pose
from sensor_msgs.msg import PointCloud2, JointState
from hybrid_controller.msg import HybridPose
import numpy as np
import rospkg
from scipy.spatial.transform import Rotation as ScipyR
from scipy import signal as scisignal
import tf2_ros

class FTProcessor:
    def __init__(self):
        rospy.init_node('ft_processor')
        
        self.ft_pose = None
        self.ee_disp_global = None

        self.g = 9.81 # m/s^2

        ####################
        # Biasing related  #
        ####################
        self.force_bias = np.zeros((3,)) # local
        self.torque_bias = np.zeros((3,)) # local

        self.last_f_global = None
        self.last_t_global = None

        self.stale_time = 5.0 # seconds
        self.t_reqd_stationary = 0.5 # seconds
        self.t_bias = rospy.get_time()-self.stale_time
        self.t_stationary = None
        self.stationary = False
        
        self.velmag = 999.9
        self.valve_on = False
        self.hybrid_mode = False

        #####################
        # Filtering related #
        #####################
        # TODO: try lowpass vs bandstop
        self._b,self._a = scisignal.butter(2,20,fs=750)
        self.last_y = np.zeros((6,))
        self.last_x = np.zeros((6,))

        # TODO: subscribe to new EE weight/pos?
        # TODO: dynamic compensation?

        self.ft_comp_pub = rospy.Publisher("/ft/wrench", Wrench, queue_size =1, latch = False)
        rospy.Subscriber("/ft/wrench_raw", Wrench, self.processNewFT, queue_size=1)
        rospy.Subscriber("/panda/ee_mass", Float64, self.setupToolMass)
        rospy.Subscriber("/joint_states", JointState, self.recordJointVelocity)
        rospy.Subscriber("/panda/hybrid_pose",HybridPose, self.checkHybrid)
        self.tfBuffer = tf2_ros.Buffer()
        self.listener = tf2_ros.TransformListener(self.tfBuffer)
        time.sleep(0.5)

        # run main loop
        self.loopFT()

    def recordJointVelocity(self,data):
        self.velmag = np.linalg.norm(data.velocity)

    def setupToolMass(self,data):
       self.tool_weight = data.data # kg

    def biasFT(self):
        # Have the required values for calculation
        if self.last_f_global is not None and self.last_t_global is not None and self.ee_disp_global is not None:
            f_global_wo_mass = self.last_f_global

            # t_weight = np.cross(self.ee_disp_global,weight)
            t_global_no_mass = self.last_t_global

            # rotate into local frame (pure rotation)
            q_ft = np.array([self.ft_pose.orientation.x, self.ft_pose.orientation.y,
                            self.ft_pose.orientation.z, self.ft_pose.orientation.w])
            R_ft = ScipyR.from_quat(q_ft)

            self.force_bias += (R_ft.inv()).apply(f_global_wo_mass) 
            self.torque_bias += (R_ft.inv()).apply(t_global_no_mass)

            print("Biasing: ",self.force_bias)


    def checkHybrid(self,data):
        # if any selection vector entry is 0, hybrid mode is engaged
        self.hybrid_mode = (np.frombuffer(data.sel_vector, dtype=np.uint8)==0).any()

    def isCurrStationary(self):
        # TODO: check if valve is turned off
        # print("stationary: ",self.velmag)
        return (self.velmag < 0.01 and not self.hybrid_mode and not self.valve_on)

    def checkBias(self):
        # if it has been enough time and the sensor is appropriately stationary, do a bias

        # check if stationary
        curr_stationary = self.isCurrStationary() # TODO: panda not moving and valve is turned off
        if(curr_stationary and not self.stationary):
            self.stationary = True
            self.t_stationary = rospy.get_time()
        elif(not curr_stationary and self.stationary):
            self.stationary = False

        # check for bias
        curr_t = rospy.get_time()
        if (self.stationary and curr_t > (self.t_bias+self.stale_time) and curr_t > (self.t_stationary + self.t_reqd_stationary)):
            self.biasFT()
            self.t_bias = curr_t

    def loopFT(self):
        # tf2 for rotation
        rate = rospy.Rate(1000.0)
        
        while not rospy.is_shutdown():
            try:
                # check for new FT location (from panda movement)
                trans = self.tfBuffer.lookup_transform('panda_link0', 'ft_sensor_mid_link', rospy.Time())
                pose_temp = Pose()
                pose_temp.position.x = trans.transform.translation.x
                pose_temp.position.y = trans.transform.translation.y
                pose_temp.position.z = trans.transform.translation.z
                pose_temp.orientation = trans.transform.rotation
                self.ft_pose = pose_temp

                # check for location of the tool weight
                trans2 = self.tfBuffer.lookup_transform('panda_link0', 'panda_ee_COM', rospy.Time())
                ft_sensor_loc = np.array([trans.transform.translation.x, trans.transform.translation.y, trans.transform.translation.z])
                ee_loc = np.array([trans2.transform.translation.x, trans2.transform.translation.y, trans2.transform.translation.z])
                
                self.ee_disp_global = ee_loc - ft_sensor_loc
                
                # check for autobiasing
                self.checkBias()
                
                rate.sleep()

            except Exception as e:
                print("unable to lookup transform: ", e)
                rate.sleep()

    def filter(self, last_x,x,last_y):
        # apply low pass filter
        a=self._a
        b=self._b
        return (b[0]*x+b[1]*last_x-a[1]*last_y)/a[0]

    def processNewFT(self,data):
        # Once a new message arrives, need to remove bias, need to rotate, compensate for tool weight, and filter

        f_local = np.array([data.force.x, data.force.y, data.force.z])
        t_local = np.array([data.torque.x, data.torque.y, data.torque.z])

        if self.ft_pose is not None and self.ee_disp_global is not None:
            # remove bias
            f_local = f_local - self.force_bias
            t_local = t_local - self.torque_bias
            
            # rotate measurement (pure rotation)
            q_ft = np.array([self.ft_pose.orientation.x, self.ft_pose.orientation.y,
                            self.ft_pose.orientation.z, self.ft_pose.orientation.w])
            R_ft = ScipyR.from_quat(q_ft)

            f_global = R_ft.apply(f_local)
            t_global = R_ft.apply(t_local)

            
            # Offset weight (force and torque)
            weight = np.array([0.0, 0.0, -self.g*self.tool_weight]) # tool is pulling in negative-z
            f_global = f_global - weight
            
            t_weight = np.cross(self.ee_disp_global,weight)
            t_global = t_global - t_weight

            self.last_f_global = np.copy(f_global)
            self.last_t_global = np.copy(t_global)

            # filter measurement
            w_global = np.concatenate([f_global, t_global], axis=0)
            w_filt = self.filter(self.last_x,w_global,self.last_y)
            self.last_y = w_filt
            self.last_x = w_global
            w_filt = w_global
            w_filt = np.round(w_filt,4)

            w_filt = -w_filt # applied forces/torques rather than reaction

            # publish topic
            wrench_out = Wrench()
            wrench_out.force.x = w_filt[0]
            wrench_out.force.y = w_filt[1]
            wrench_out.force.z = w_filt[2]
            wrench_out.torque.x = w_filt[3]
            wrench_out.torque.y = w_filt[4]
            wrench_out.torque.z = w_filt[5]
            
            self.ft_comp_pub.publish(wrench_out)                       
       
if __name__ == "__main__":
    ft = FTProcessor()
    rospy.spin()





