#!/usr/bin/env python

""" Checks whether actual pose matches intended command
 Created: 6/3/2022
"""

__author__ = "Mike Hagenow"

import rospy
import time
from std_msgs.msg import Float64
from geometry_msgs.msg import Wrench, PoseStamped, Pose, Vector3
from hybrid_controller.msg import HybridPose
import numpy as np
from scipy.spatial.transform import Rotation as ScipyR
import tf2_ros

class EEPoseChecker:
    def __init__(self):
        rospy.init_node('eeposechecker')
        self.mag_dist_pub = rospy.Publisher('/diagnostics/pose_error/mag_dist', Float64, queue_size=1)
        self.mag_ang_pub = rospy.Publisher('/diagnostics/pose_error/mag_ang', Float64, queue_size=1)
        self.actual_ee_pub = rospy.Publisher('/diagnostics/pose_actual', PoseStamped, queue_size=1)

        tfBuffer = tf2_ros.Buffer()
        listener = tf2_ros.TransformListener(tfBuffer)

        time.sleep(0.5)

        self.gotIKcommand = False
        self.gotIKout = False
        rospy.Subscriber("/ik/pose_command", PoseStamped, self.storeCommand)
        
        mag_dist = Float64()
        mag_ang = Float64()

        rate = rospy.Rate(10)
        while not rospy.is_shutdown():
            try:
                trans = tfBuffer.lookup_transform('panda_link0', 'ik_output', rospy.Time())
                self.ikout = Pose()
                self.ikout.position.x = trans.transform.translation.x
                self.ikout.position.y = trans.transform.translation.y
                self.ikout.position.z = trans.transform.translation.z
                self.ikout.orientation.x = trans.transform.rotation.x
                self.ikout.orientation.y = trans.transform.rotation.y
                self.ikout.orientation.z = trans.transform.rotation.z
                self.ikout.orientation.w = trans.transform.rotation.w
                self.gotIKout = True

                # Also, try to republish actual pose from tf as a pose stamped
                trans = tfBuffer.lookup_transform('panda_link0', 'panda_ee', rospy.Time())
                poset = PoseStamped()
                post = trans.transform.translation
                rott = trans.transform.rotation
                poset.header.frame_id = "panda_link0"
                poset.header.stamp = rospy.Time.now()
                poset.pose.position = Point(x = post.x, y = post.y, z = post.z)
                poset.pose.orientation = Quaternion(w = rott.w, x = rott.x, y = rott.y, z = rott.z)

            except Exception as e:
                print(e)

            if self.gotIKcommand and self.gotIKout:
                pos_command = np.array([self.ikcommand.position.x, self.ikcommand.position.y, self.ikcommand.position.z])
                pos_out = np.array([self.ikout.position.x, self.ikout.position.y, self.ikout.position.z])
                pos_err = np.linalg.norm(pos_out - pos_command)
                mag_dist.data = pos_err
                self.mag_dist_pub.publish(mag_dist)
                quat_command = np.array([self.ikcommand.orientation.x, self.ikcommand.orientation.y, self.ikcommand.orientation.z, self.ikcommand.orientation.w])
                quat_out = np.array([self.ikout.orientation.x, self.ikout.orientation.y, self.ikout.orientation.z, self.ikout.orientation.w])
                R_command = ScipyR.from_quat(quat_command)
                R_out = ScipyR.from_quat(quat_out)
                ang_err = np.linalg.norm((R_command.inv() * R_out).as_rotvec())
                if ang_err > np.pi/2.0:
                    ang_err = np.pi-ang_err
                mag_ang.data = ang_err
                self.mag_ang_pub.publish(mag_ang)
            rate.sleep()

    def storeCommand(self,data):
        self.ikcommand = data.pose
        self.gotIKcommand = True
       
if __name__ == "__main__":
    checker = EEPoseChecker()


