#!/usr/bin/env python

""" Checks whether actual pose matches intended command
 Created: 6/3/2022
"""

__author__ = "Mike Hagenow"

import rospy
import time
from std_msgs.msg import Float64
from geometry_msgs.msg import Wrench, PoseStamped, Pose, Vector3
from franka_core_msgs.msg import RobotState, EndPointState
from hybrid_controller.msg import HybridPose
import numpy as np
from scipy.spatial.transform import Rotation as ScipyR
import tf2_ros

class PandaLimitsChecker:
    def __init__(self):
        rospy.init_node('pandalimitschecker')
        self.mag_dist_pub = rospy.Publisher('/diagnostics/panda_cartesian', Float64, queue_size=1)
        tfBuffer = tf2_ros.Buffer()
        listener = tf2_ros.TransformListener(tfBuffer)

        time.sleep(0.5)
        rospy.Subscriber("/franka_ros_interface/custom_franka_state_controller/robot_state", RobotState, self.storeRobotState)
        rospy.Subscriber("/franka_ros_interface/custom_franka_state_controller/tip_state", EndPointState, self.storeRobotWrench)
        self.robot_active = False
        self.max_force = 0
        self.max_torque = 0
        rospy.spin()

    def storeRobotState(self,data):
        self.robotstate = data
        self.cartesian_collision = data.cartesian_collision
        if data.robot_mode == 1 or data.robot_mode == 2:
            self.robot_active = True
        print("Cart Collision: ",self.cartesian_collision)
        
    
    def storeRobotWrench(self,data):
        wrench = data.K_F_ext_hat_K.wrench
        self.ext_load = np.array([wrench.force.x, wrench.force.y, wrench.force.z, wrench.torque.x, wrench.torque.y, wrench.torque.z])
        if self.robot_active:
            self.last_active_ext_load = self.ext_load

        if np.max(self.ext_load[0:3])>self.max_force:
            self.max_force = np.max(self.ext_load[0:3])
        if np.max(self.ext_load[3:6])>self.max_torque:
            self.max_torque = np.max(self.ext_load[3:6])
        print("Ext Load: ",self.ext_load)
        try:
            print("Ext Load (last): ",self.last_active_ext_load)
        except:
            pass
        print("Max F: ",self.max_force," Max T: ",self.max_torque)
if __name__ == "__main__":
    checker = PandaLimitsChecker()


