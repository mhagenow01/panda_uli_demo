#!/usr/bin/env python

""" Commands hybrid pose to Panda IK (Admittance)
 Created: 4/14/2022
"""

__author__ = "Mike Hagenow"

from enum import Enum
import rospy
import time
from std_msgs.msg import Float64, Bool
from geometry_msgs.msg import Wrench, PoseStamped, Vector3
from hybrid_controller.msg import HybridPose
import numpy as np
from scipy.spatial.transform import Rotation as ScipyR
import tf2_ros

class HybridMode(Enum):
    Hybrid = 1
    Passthrough = 2

class HybridController:
    def __init__(self):
        rospy.init_node('hybrid_controller')
        self.tfBuffer = tf2_ros.Buffer()
        self.listener = tf2_ros.TransformListener(self.tfBuffer)
        self.ik_pub = rospy.Publisher('/ik/pose_command', PoseStamped, queue_size=1)
        self.ik_pub_underconstrained = rospy.Publisher('/ik/pose_command_underconstrained', PoseStamped, queue_size=1)
        self.ik_nohybrid_pub = rospy.Publisher('/panda/pose_nohybrid', PoseStamped, queue_size=1)

        time.sleep(0.5)

        self.mode = HybridMode.Hybrid
        # self.mode = HybridMode.Passthrough
        self.samprate = 100.0
        self.gain_lin = 0.001
        self.gain_ang = 0.1
        self.admittance = True
        self.lin_stiffness = np.array([700.0, 700.0, 700.0])
        self.ang_stiffness = np.array([20.0, 20.0, 20.0])

        self.underconstrained = False

        self.forces = np.zeros((3,))
        self.torques = np.zeros((3,))        
        self.cf = np.array((0,0,0,1))
        self.sel_vector = np.ones((6,))
        self.desired_pos_cf = None

        self.lin_damping  = 2.0 * np.sqrt(self.lin_stiffness)
        self.ang_damping  = 2.0 * np.sqrt(self.ang_stiffness)

        self.prev_q = None
        self.prev_pos = None
        self.linvel = np.zeros((3,))
        self.angvel = np.zeros((3,))

        rospy.Subscriber("/panda/pose_command", PoseStamped, self.commandPose)
        rospy.Subscriber("/panda/admittanceon", Bool, self.toggleAdmittance)
        rospy.Subscriber("/panda/hybrid_pose", HybridPose, self.commandHybrid)
        rospy.Subscriber("/panda/set_hybrid_gain_linear", Float64, self.setGainLinear)
        rospy.Subscriber("/panda/set_hybrid_gain_angular", Float64, self.setGainAngular)
        rospy.Subscriber("/panda/set_stiffness_linear", Vector3, self.setStiffnessLinear)
        rospy.Subscriber("/panda/set_stiffness_angular", Vector3, self.setStiffnessAngular)
        rospy.Subscriber("/ft/wrench", Wrench, self.recordFT, queue_size=1)

        self.runHybrid()

    def toggleAdmittance(self,data):
        if data.data == True:
            self.mode = HybridMode.Hybrid
        else:
            self.desired_pos_cf = None # so it takes the current joint angles when turned on
            self.mode = HybridMode.Passthrough

    def runHybrid(self):
        rate = rospy.Rate(self.samprate)
        while not rospy.is_shutdown():
            rate.sleep()
        
            # If currently commanding traditional pose, bypass hybrid calculation
            if self.mode == HybridMode.Passthrough:
                continue

            # Compute Hybrid Control Law
            try:
                # check for new ee location
                trans = self.tfBuffer.lookup_transform('panda_link0', 'panda_ee', rospy.Time())
                curr_pos = np.array([trans.transform.translation.x, trans.transform.translation.y, trans.transform.translation.z])
                curr_q = np.array([trans.transform.rotation.x, trans.transform.rotation.y, trans.transform.rotation.z, trans.transform.rotation.w])

                # store ee velocity for admittance law
                if self.prev_q is not None:
                    R_p = ScipyR.from_quat(self.prev_q)
                    R_c = ScipyR.from_quat(curr_q)
                    angvel_prev = (R_p.inv() * R_c).as_rotvec()*self.samprate
                    # self.angvel = R_p.apply(angvel_prev) # rotate into global
                    # TODO: angvel seems to cause instability -- leaving 0 for now and using robot friction
                    self.linvel = (curr_pos - self.prev_pos)*self.samprate
                self.prev_q = curr_q
                self.prev_pos = curr_pos 

                # convert current state into constraint frame
                R_cf = ScipyR.from_quat(self.cf)
                R_curr_q = ScipyR.from_quat(curr_q)
                R_curr_q_cf = (R_cf.inv() * R_curr_q)
                curr_q_cf = (R_cf.inv() * R_curr_q).as_quat()
                curr_pos_cf = (R_cf.inv()).apply(curr_pos)
                curr_f_cf = (R_cf.inv()).apply(self.forces)
                curr_t_cf = (R_cf.inv()).apply(self.torques)
                linvel_cf = (R_cf.inv()).apply(self.linvel)
                angvel_cf = (R_cf.inv()).apply(self.angvel)

                # No command sent yet.. use current pos and other defaults
                if self.desired_pos_cf is None:
                    self.desired_pos_cf = curr_pos_cf
                    self.desired_q_cf = curr_q_cf
                    self.desired_force_cf = np.zeros((3,))
                    self.desired_torque = np.zeros((3,))

                #############################
                # apply control law         #
                #############################

                ########## force law ##########
                if not self.admittance:                
                    admit_pos = self.sel_vector[0:3]*self.desired_pos_cf
                else:
                    # force is negative because it is the reaction force
                    admit_pos = self.sel_vector[0:3]*(self.desired_pos_cf + (-curr_f_cf + self.lin_damping*linvel_cf)/self.lin_stiffness)
                force_pos = (np.ones(3,)-self.sel_vector[0:3])*(self.gain_lin*(self.desired_force_cf-curr_f_cf)+curr_pos_cf)
                new_pos_cf = admit_pos + force_pos
                
                ########## torque law ##########
                R_desired_q_cf = ScipyR.from_quat(self.desired_q_cf)
                rvec_des_cf = R_desired_q_cf.as_rotvec() # compute using rotation vectors
                rvec_curr_cf = R_curr_q_cf.as_rotvec()
                
                if not self.admittance:
                    admit_q = self.sel_vector[3:6]*rvec_des_cf
                else:
                    # torque is negative because it is the reaction torque
                    admit_q = self.sel_vector[3:6]*(rvec_des_cf + (-curr_t_cf + self.ang_damping*angvel_cf)/self.ang_stiffness)
                force_q = (np.ones(3,)-self.sel_vector[3:6])*(self.gain_ang*(self.desired_torque-curr_t_cf)+rvec_curr_cf)
                hyb_torque_cmd = admit_q + force_q
                R_torque_hybrid = ScipyR.from_rotvec(hyb_torque_cmd)

                # Convert back to global frame
                new_pos = R_cf.apply(new_pos_cf)
                new_quat = (R_cf * R_torque_hybrid).as_quat()

                # Send original pose goal (without hybrid control law) as a posestamped
                pose_nohybrid = PoseStamped()
                pos_noh = R_cf.apply(self.desired_pos_cf)
                quat_noh = (R_cf * R_desired_q_cf).as_quat()
                pose_nohybrid.header.stamp = rospy.Time.now()
                pose_nohybrid.header.frame_id = 'map'
                pose_nohybrid.pose.position.x = pos_noh[0]
                pose_nohybrid.pose.position.y = pos_noh[1]
                pose_nohybrid.pose.position.z = pos_noh[2]
                pose_nohybrid.pose.orientation.x = quat_noh[0]
                pose_nohybrid.pose.orientation.y = quat_noh[1]
                pose_nohybrid.pose.orientation.z = quat_noh[2]
                pose_nohybrid.pose.orientation.w = quat_noh[3]
                self.ik_nohybrid_pub.publish(pose_nohybrid)

                # Send to IK
                pose_out = PoseStamped()
                pose_out.header.frame_id = 'map'
                pose_out.header.stamp = rospy.Time.now()
                pose_out.pose.position.x = new_pos[0]
                pose_out.pose.position.y = new_pos[1]
                pose_out.pose.position.z = new_pos[2]
                pose_out.pose.orientation.x = new_quat[0]
                pose_out.pose.orientation.y = new_quat[1]
                pose_out.pose.orientation.z = new_quat[2]
                pose_out.pose.orientation.w = new_quat[3]
                if not self.underconstrained:
                    self.ik_pub.publish(pose_out)
                else:
                    self.ik_pub_underconstrained.publish(pose_out)

            except Exception as e:
                print(e)

    def commandPose(self, pose):
        self.mode = HybridMode.Passthrough
        self.ik_pub.publish(pose)

    def setGainLinear(self,data):
        self.gain_lin = data.data

    def setStiffnessLinear(self,data):
        self.lin_stiffness = np.array([data.x, data.y, data.z])
        self.lin_damping = np.sqrt(self.lin_stiffness)

    def setStiffnessAngular(self,data):
        self.ang_stiffness = np.array([data.x, data.y, data.z])
        self.ang_damping = np.sqrt(self.ang_stiffness)

    def setGainAngular(self,data):
        self.gain_ang = data.data

    def recordFT(self,data):
        self.forces = np.array([data.force.x, data.force.y, data.force.z])
        self.torques = np.array([data.torque.x, data.torque.y, data.torque.z])

    def commandHybrid(self,hpose):
        self.mode = HybridMode.Hybrid
        self.underconstrained = hpose.underconstrained.data
        self.sel_vector = np.frombuffer(hpose.sel_vector, dtype=np.uint8)
        self.cf = np.array([hpose.constraint_frame.x, hpose.constraint_frame.y, hpose.constraint_frame.z, hpose.constraint_frame.w])
        self.desired_pos_cf = np.array([hpose.pose.position.x, hpose.pose.position.y, hpose.pose.position.z])
        self.desired_q_cf = np.array([hpose.pose.orientation.x, hpose.pose.orientation.y, hpose.pose.orientation.z, hpose.pose.orientation.w])
        self.desired_force_cf = np.array([hpose.wrench.force.x, hpose.wrench.force.y, hpose.wrench.force.z])
        self.desired_torque = np.array([hpose.wrench.torque.x, hpose.wrench.torque.y, hpose.wrench.torque.z])
       
if __name__ == "__main__":
    hybrid = HybridController()




