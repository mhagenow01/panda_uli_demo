<?xml version="1.0"?>
<launch>
  <arg name="config" value="$(find actuation_group)/../config" />
  <rosparam command="load" file="$(arg config)/robot_config.yaml" />

  <arg name="rate" value="30" />
  <arg name="load_gripper" value="false" />
  <param name="robot_description" command="$(find xacro)/xacro --inorder '$(arg config)/panda.urdf'" />

  <node pkg="collision_free_ik" type="main" name="main" output="screen">
      <param name="urdf_fp" type="string" value="$(arg config)/panda.urdf"/>
      <param name="arm_collider_fp" type="string" value="$(arg config)/ik/panda_collision.json"/>
      <param name="environment_fp" type="string" value="$(arg config)/ik/environment.json"/>
      <param name="initial_q" type="yaml" value="[0.0754606,-0.337453,0.150729,-2.46194,0.0587094,2.12597,0.972193]"/>
      <param name="joint_names" type="yaml" value="['panda_joint1','panda_joint2','panda_joint3','panda_joint4','panda_joint5','panda_joint6','panda_joint7']"/>

      <remap from="out" to="/franka_ros_interface/motion_controller/arm/joint_commands" />
      <remap from="in" to="/ik/pose_command" />
  </node>

  <rosparam command="load" file="$(find franka_ros_controllers)/config/ros_controllers.yaml" ns="/franka_ros_interface"/>

  <arg name="q  " default="true" />

  <!-- Start the custom_franka_control_node for advertising controller services and starting custom controller manager-->
  <param name="/robot_config/robot_ip" type="str" value="$(env PANDA_IP)" />
  <node name="franka_control" pkg="franka_interface" type="custom_franka_control_node" output="screen" required="true" >
    <param name="publish_frequency" value="$(arg rate)"/>
  </node>

  <!-- Start the custom state publisher for franka_ros_interface -->
  <rosparam command="load" file="$(find franka_interface)/config/basic_controllers.yaml"/>
  <node name="state_controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="franka_ros_interface/custom_franka_state_controller" />
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" output="screen">
    <param name="publish_frequency" value="$(arg rate)"/>
  </node>

  <!-- Start joint_state_publisher with the joint states of the robot -->
  <node name="joint_state_publisher" type="joint_state_publisher" pkg="joint_state_publisher" output="screen">
    <rosparam if="$(arg load_gripper)" param="source_list">[franka_ros_interface/custom_franka_state_controller/joint_states, franka_gripper/joint_states] </rosparam>
    <rosparam unless="$(arg load_gripper)" param="source_list">[franka_ros_interface/custom_franka_state_controller/joint_states] </rosparam>
    <param name="rate" value="$(arg rate)"/>
  </node>
  <node name="joint_state_desired_publisher" type="joint_state_publisher" pkg="joint_state_publisher" output="screen">
    <rosparam if="$(arg load_gripper)" param="source_list">[franka_ros_interface/custom_franka_state_controller/joint_states_desired, franka_gripper/joint_states] </rosparam>
    <rosparam unless="$(arg load_gripper)" param="source_list">[franka_ros_interface/custom_franka_state_controller/joint_states_desired] </rosparam>
    <param name="rate" value="$(arg rate)"/>
    <remap from="/joint_states" to="/joint_states_desired" />
  </node>

  <node name="load_controllers" pkg="controller_manager" type="controller_manager" respawn="false"
                      output="screen" args="load
                                          franka_ros_interface/position_joint_position_controller
                                          franka_ros_interface/effort_joint_position_controller" />

  <node pkg="tf" type="static_transform_publisher" name="base_to_link0" args="0 0 0 0 0 0 1 base panda_link0 100" />                                                                      
  <node pkg="tf" type="static_transform_publisher" name="world_to_base" args="0 0 0 0 0 0 1 world base 100" />

  <!-- Force-Torque Sensor-->
  <node name="ftsocket" pkg="ft_sensor" type="ftsocket" output="screen" />
  <node name="ee_selector" pkg="ft_sensor" type="ee_selector" output="screen" />
  <node name="ft_processor" pkg="ft_sensor" type="ft_processor" output="screen" />

  <node pkg="env_mapping" type="concatenatePC" name="concatenatePC" output="screen"/>

  <!-- Hybrid Controller-->
  <node name="hybrid_controller" pkg="hybrid_controller" type="hybrid_controller" output="screen" />

  <!-- <node name="user_experience_enhancer" pkg="user_experience_enhancer" type="user_experience_enhancer" output="screen" /> -->

</launch>