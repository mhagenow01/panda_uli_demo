#!/usr/bin/env python

""" Scan Toggler: launches scan behavior
 Created: 4/4/2022
"""

__author__ = "Mike Hagenow"

import rospy
import time
from std_msgs.msg import String
import numpy as np
import rospkg
import subprocess32
import sys
import signal

class Scantoggler:
    def __init__(self):
        rospy.init_node('scan_toggler')

        self.scan_running = False

        # Subscribe to stop mapping to kill scanning subprocess
        rospy.Subscriber("/mappingToggle", String, self.mappingToggle)

        # subscribe to rviztrigger to catch "scan" to start scan
        rospy.Subscriber("/rviz_triggers", String, self.scanInit)

    def mappingToggle(self,data):
        if data.data == "off":
            self.stopScanning()
            
    def scanInit(self,data):
        if self.scan_running is False and data.data=="scan":
            self.scan_running = True
            self._p = subprocess32.Popen(["roslaunch", "env_mapping", "run_scan.launch"]) 
       
    def stopScanning(self):
        if self._p is not None:
            self._p.terminate()
        self.scan_running = False 
            
    def signal_handler(self, signal, frame):
        sys.exit()
       
if __name__ == "__main__":
    toggler = Scantoggler()
    signal.signal(signal.SIGINT, toggler.signal_handler)
    rospy.spin()





