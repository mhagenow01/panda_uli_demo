#!/usr/bin/env python
from typing import Callable
import rospy
import actionlib
import control_msgs.msg 
from geometry_msgs.msg import Twist, PoseStamped, Vector3
from franka_gripper.msg import GraspAction, MoveAction, GraspGoal, MoveGoal
from sensor_msgs.msg import Joy
from std_msgs.msg import String, Float64, Float64MultiArray
import tf2_geometry_msgs
import tf
from tf.transformations import *
import tf2_ros
import signal
import sys
import numpy as np

class JoyCorrectionDriver(object):
    def __init__(self):
        self._button_pub = rospy.Publisher("/zdinput/button", Float64, queue_size=1)
        self._correction_pub = rospy.Publisher("/zdinput/input", Float64MultiArray, queue_size=1)

        self._joy_sub = rospy.Subscriber('/joy', Joy, self.on_joy)

        self._ax2_init = False
        self._ax5_init = False

    def mapping(self,x,low=0.01,high=1):
        a = (np.log(high)-np.log(low))/0.9
        b = np.exp(np.log(low)-.1*a)
        return np.sign(x)*b*((np.exp(a*np.abs(x))-1))
        
    def on_joy(self, msg):
        ax = np.array(msg.axes)
        if ax[2] != 0:
            self._ax2_init = True
        if not self._ax2_init:
            ax[2]=1
        # if ax[5] != 0:
        #     self._ax5_init = True
        # if not self._ax5_init:
        #     ax[5]=1
        cor_temp = Float64MultiArray()
        # Abbrasiveness
        # cor_temp.data.append(np.array([self.mapping((ax[2]-ax[5])/2)]))
        # x
        cor_temp.data.append(np.array([self.mapping(ax[1])]))
        # y
        cor_temp.data.append(np.array([self.mapping(ax[0])]))
        # tx
        cor_temp.data.append(np.array([self.mapping(ax[3])]))
        # ty
        # cor_temp.data.append(np.array([self.mapping(ax[4])]))

        self._correction_pub.publish(cor_temp)
       
        button = float(msg.buttons[1])
        tempF = Float64()
        tempF.data = button
        self._button_pub.publish(tempF)
    
    def run(self):
        rospy.spin()

    def signal_handler(self, signal, frame):
        sys.exit()

if __name__ == "__main__":
    rospy.init_node('joy_driver')
    mouse_driver = JoyCorrectionDriver()
    signal.signal(signal.SIGINT, mouse_driver.signal_handler)
    mouse_driver.run()
